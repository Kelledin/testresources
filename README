testresources: extensions to python unittest to allow declaritive use
of resources by test cases.

Copyright (C) 2005-2008  Robert Collins <robertc@robertcollins.net>
See LICENSE for more details.

testresources is attempting to extend unittest with a clean and simple api to
provide test optimisation where expensive common resources are needed for test
cases - for example sample working trees for VCS systems, reference databases
for enterprise applications, or web servers ... let imagination run wild.

Dependencies:
=============

* Python 2.4+
* pyunit3k

Note that pyunit3k is required for *running* the tests for testresources. You
can use testresources in your own app without using pyunit3k.

How testresources works:
========================
There are three main components to make testresources work:
1) testresources.TestResource
   A TestResource is a object that tests can use, which provide a getResource()
   method that returns and object implementing whichever interface the client
   needs, and which will accept that same object back on its finishedWith()
   method.
   Commonly the TestResource will be a class, though that is not a requirement.
   Most importantly, two getResources with no finishedWith call in the middle,
   to the same TestResource, should return the same object.
   XXX the same object requirement may not be needed - but for expensive
   resources that is the optimisation goal.
   The goals for TestResources that cannot finish properly are not yet clear,
   so for now the behaviour will to silently continue.
   See pydoc testresources.TestResource for details.
2) testresources.OptimisingTestSuite
   This TestSuite will introspect all the test cases it holds directly and
   if they declare needed resources, will run the tests in an order that
   attempts to minimise the number of setup and tear downs required.
   It attempts to achieve this by callling getResource() and finishedWith()
   around the sequence of tests that use a specific resource.

   OptimisingTestSuite has a new method over normal TestSuites:
   adsorbSuite(suite), which scans another test suite and incorporates all of
   its tests directly into the OptimisingTestSuite. This allows for you to
   optimise across as broad or small a collection of tests as you wish.

3) testresources.ResourcedTestCase
   ResourceTestCase can be used as a base class for tests, and when that is
   done tests will have their _resources attribute automatically checked for
   resources by both OptimisingTestSuite and their own setUp() and tearDown()
   methods. (This allows tests to remain functional without needing this
   specific TestSuite as a container). Alternatively, you can call
   ResourceTestCase.setUpResources(self) and
   ResourceTestCase.tearDownResources(self) from your own classes setUp and
   tearDown and the same behaviour will be activated.

   Do declare the use of a resource, set _resources as an attribute listing
   tuples of attribute name, TestResource. During setUp self._attribute_name
   will be set to TestResource.getResource(), and finsh() will be called for
   you during tearDown().

4) testresources.TestLoader
   This is a trivial TestLoader that creates OptimisingTestSuites by default.
